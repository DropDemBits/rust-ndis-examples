env_files = [
  # Should have
  # VC_BUILD_DIR="<path to vc build vars>"
 "../../.env/vc_build_dir.env"  
]

[env]
DRIVER_VERSION="*"
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
TARGET_ARCH = { source = "${CARGO_MAKE_RUST_TARGET_TRIPLE}", default_value = "unsupported", mapping = { "i686-pc-windows-msvc" = "x86", "x86_64-pc-windows-msvc" = "amd64", "aarch64-pc-windows-msvc" = "arm64" } }
TARGET_BASE_DIR = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}\\${CARGO_MAKE_RUST_TARGET_TRIPLE}"
# From https://github.com/microsoft/windows-drivers-rs/blob/15a3c50a08d83965ebbf11a8dc62e03a0c131e03/rust-driver-makefile.toml#L11-L12
TARGET_DIR = { source = "${CARGO_MAKE_CARGO_PROFILE}", default_value = "${TARGET_BASE_DIR}\\${CARGO_MAKE_CARGO_PROFILE}", mapping = { "dev" = "${TARGET_BASE_DIR}\\debug" } }

# Make `cc` use `clang-cl` and `llvm-lib` if we're compiling with LTO
CC = { value = "clang-cl", condition.env_not_set = [ "NO_LTO" ] }
AR = { value = "llvm-lib", condition.env_not_set = [ "NO_LTO" ] }
# Also set CFLAGS to use ThinLTO
CFLAGS = { value = "/clang:-flto=thin", condition.env_not_set = [ "NO_LTO" ] }

# Platform for executing tools
Platform = { source = "${CARGO_MAKE_RUST_TARGET_TRIPLE}", default_value = "unsupported", mapping = { "i686-pc-windows-msvc" = "x86", "x86_64-pc-windows-msvc" = "x64", "aarch64-pc-windows-msvc" = "arm64" } }
# There is no x64 version of inf2cat, so fall back to x86
Inf2Cat_Platform = { source = "${Platform}", default_value = "${Platform}", mapping = { "x64" = "x86" } }
# Load VS DevEnv
Wdk_WindowsSdkVerBinPath = { script = ['call "%VC_BUILD_DIR%" %Platform%', 'echo %WindowsSdkVerBinPath%\%Platform%'], depends_on = ["VC_BUILD_DIR", "Platform"] }
Wdk_WindowsSdkVerToolPath = { script = ['call "%VC_BUILD_DIR%" %Platform%', 'echo %WindowsSdkDir%\Tools\%WindowsSDKVersion%\%Platform%'], depends_on = ["VC_BUILD_DIR", "Platform"] }
Wdk_WindowsSdkVerInf2CatPath = { script = ['call "%VC_BUILD_DIR%" %Inf2Cat_Platform%', 'echo %WindowsSdkVerBinPath%\%Inf2Cat_Platform%'], depends_on = ["VC_BUILD_DIR", "Inf2Cat_Platform"] }

[env.development]
BUILD_RELEASE = ""

[env.production]
BUILD_RELEASE = "--release"

[tasks.build]
env = { "RUSTFLAGS" = { value = "-Clinker-plugin-lto -Clinker=lld-link -Clink-arg=-fuse-ld=lld-link", condition = { env_not_set = ["NO_LTO"] } } }
# Specify the target triple so that -Cprefer-dynamic doesn't conflict with -Clinker-plugin-lto while building proc macros
args = ["build", "--target", "${CARGO_MAKE_RUST_TARGET_TRIPLE}", "@@remove-empty(BUILD_RELEASE)"]

[tasks.rename]
dependencies = ["build"]
cwd = "${TARGET_DIR}"
script = '''
if exist %CARGO_MAKE_CRATE_FS_NAME%.sys (
  del %CARGO_MAKE_CRATE_FS_NAME%.sys
)
rename %CARGO_MAKE_CRATE_FS_NAME%.dll %CARGO_MAKE_CRATE_FS_NAME%.sys
'''

[tasks.make-dist]
cwd = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"
script='if not exist dist\%CARGO_MAKE_CRATE_NAME% ( mkdir dist\%CARGO_MAKE_CRATE_NAME% )'

[tasks.copysys]
dependencies = ["make-dist", "rename"]
cwd = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"
script='''
copy /y %TARGET_DIR%\%CARGO_MAKE_CRATE_FS_NAME%.sys dist\%CARGO_MAKE_CRATE_NAME%\
copy /y %TARGET_DIR%\%CARGO_MAKE_CRATE_FS_NAME%.pdb dist\%CARGO_MAKE_CRATE_NAME%\
'''

[tasks.stampinf]
dependencies = ["make-dist"]
cwd = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"
script='''
copy /y "%CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE_DIRECTORY%\%CARGO_MAKE_CRATE_FS_NAME%.inx" "dist\%CARGO_MAKE_CRATE_NAME%\%CARGO_MAKE_CRATE_FS_NAME%.inf"
"%Wdk_WindowsSdkVerBinPath%\stampinf.exe" -f dist\%CARGO_MAKE_CRATE_NAME%\%CARGO_MAKE_CRATE_FS_NAME%.inf -a %TARGET_ARCH% -d %DRIVER_VERSION% -v %DRIVER_VERSION% -k 1.31 -x
'''

[tasks.infverif]
dependencies = ["stampinf"]
cwd = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"
ignore_errors = true
# Can only put the network driver package in the driver store if it's 25319 or later.
script='''
"%Wdk_WindowsSdkVerToolPath%\infverif.exe" /v /w /wbuild 10.0.25319 /msft "dist\%CARGO_MAKE_CRATE_NAME%\%CARGO_MAKE_CRATE_FS_NAME%.inf"
'''

[tasks.inf2cat]
dependencies = ["stampinf"]
cwd = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"
script='''
"%Wdk_WindowsSdkVerInf2CatPath%\inf2cat.exe" /driver:dist\%CARGO_MAKE_CRATE_NAME%\ /os:10_x64
'''

[tasks.dist]
dependencies = ["copysys", "inf2cat", "infverif"]
cwd = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"
script='''
@rem Make a self-signed cert
if not exist DriverCertificate.cer (
  makecert -r -pe -ss PrivateCertStore -n CN=DriverCertificate DriverCertificate.cer
) else (
  echo Certificate already exists.
)

@rem And sign the driver
"%Wdk_WindowsSdkVerBinPath%\signtool.exe" sign /debug /a /ph /v /s PrivateCertStore /n DriverCertificate /fd certHash /t http://timestamp.digicert.com dist/%CARGO_MAKE_CRATE_NAME%/%CARGO_MAKE_CRATE_FS_NAME%.sys dist/%CARGO_MAKE_CRATE_NAME%/*.cat

copy /y DriverCertificate.cer dist\%CARGO_MAKE_CRATE_NAME%\
'''
